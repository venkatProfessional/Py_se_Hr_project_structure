{"name": "test_dashboard_title", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\n  (Session info: chrome=131.0.6778.109)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7F03080D5+2992373]\n\t(No symbol) [0x00007FF7EFF9BFD0]\n\t(No symbol) [0x00007FF7EFE35739]\n\t(No symbol) [0x00007FF7EFE7EBB5]\n\t(No symbol) [0x00007FF7EFEAF36A]\n\t(No symbol) [0x00007FF7EFE7C596]\n\t(No symbol) [0x00007FF7EFEAF580]\n\t(No symbol) [0x00007FF7EFECF584]\n\t(No symbol) [0x00007FF7EFEAF113]\n\t(No symbol) [0x00007FF7EFE7A918]\n\t(No symbol) [0x00007FF7EFE7BA81]\n\tGetHandleVerifier [0x00007FF7F0366A2D+3379789]\n\tGetHandleVerifier [0x00007FF7F037C32D+3468109]\n\tGetHandleVerifier [0x00007FF7F0370043+3418211]\n\tGetHandleVerifier [0x00007FF7F00FC78B+847787]\n\t(No symbol) [0x00007FF7EFFA757F]\n\t(No symbol) [0x00007FF7EFFA2FC4]\n\t(No symbol) [0x00007FF7EFFA315D]\n\t(No symbol) [0x00007FF7EFF92979]\n\tBaseThreadInitThunk [0x00007FFD35F27374+20]\n\tRtlUserThreadStart [0x00007FFD36EBCC91+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"87af8e0c292224afa74b55821892b429\")>\n\n    @pytest.fixture(scope=\"function\")\n    def login(driver):\n        config = read_config()\n        login_page = LoginPage(driver)\n        login_page.load(config[\"base_url\"])\n>       login_page.login(config[\"username\"], config[\"password\"])\n\ntests\\conftest.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login_page.py:14: in login\n    self.enter_text(self.PASSWORD, password)\npages\\base_page.py:9: in enter_text\n    self.driver.find_element(*locator).clear()\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:155: in clear\n    self._execute(Command.CLEAR_ELEMENT)\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:573: in _execute\n    return self._parent.execute(command, params)\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E5040BC640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"invalid element state\\\\n  (Session info...07FF7EFF92979]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD35F27374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFD36EBCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\nE         (Session info: chrome=131.0.6778.109)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7F03080D5+2992373]\nE       \t(No symbol) [0x00007FF7EFF9BFD0]\nE       \t(No symbol) [0x00007FF7EFE35739]\nE       \t(No symbol) [0x00007FF7EFE7EBB5]\nE       \t(No symbol) [0x00007FF7EFEAF36A]\nE       \t(No symbol) [0x00007FF7EFE7C596]\nE       \t(No symbol) [0x00007FF7EFEAF580]\nE       \t(No symbol) [0x00007FF7EFECF584]\nE       \t(No symbol) [0x00007FF7EFEAF113]\nE       \t(No symbol) [0x00007FF7EFE7A918]\nE       \t(No symbol) [0x00007FF7EFE7BA81]\nE       \tGetHandleVerifier [0x00007FF7F0366A2D+3379789]\nE       \tGetHandleVerifier [0x00007FF7F037C32D+3468109]\nE       \tGetHandleVerifier [0x00007FF7F0370043+3418211]\nE       \tGetHandleVerifier [0x00007FF7F00FC78B+847787]\nE       \t(No symbol) [0x00007FF7EFFA757F]\nE       \t(No symbol) [0x00007FF7EFFA2FC4]\nE       \t(No symbol) [0x00007FF7EFFA315D]\nE       \t(No symbol) [0x00007FF7EFF92979]\nE       \tBaseThreadInitThunk [0x00007FFD35F27374+20]\nE       \tRtlUserThreadStart [0x00007FFD36EBCC91+33]\n\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidElementStateException"}, "start": 1753178527929, "stop": 1753178527929, "uuid": "28947b50-dad7-4fde-9d4b-7c210f458c34", "historyId": "4fdb3ff022c5ddb7b1ce62058a7927fa", "testCaseId": "4fdb3ff022c5ddb7b1ce62058a7927fa", "fullName": "tests.test_sample#test_dashboard_title", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_sample"}, {"name": "host", "value": "DESKTOP-NDHQIMI"}, {"name": "thread", "value": "11060-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_sample"}]}